{"version":3,"file":"03-organism/sq-card/sq-card.css","mappings":"AACE,yCACE,WACA,YAGF,8CACE,WAGF,iGACE,aCwKI,4CDnKJ,8GAEE,cEc2B,CFb3B,gBEc2B,CFZ3B,0IACE,cEoByB,CFnBzB,gBEkByB,EFd/B,0BACE,aACA,6CACA,YG3BQ,CH4BR,eG5BQ,CH6BR,oBCmJI,4CDxJN,0BAOI,iBG7BM,CH8BN,8CCgJE,0CDxJN,0BAWI,aACA,eACA,iBGnCM,EH6CR,mHACE,cG9CM,CHqDV,+FACE,aACA,eACA,sBACA,aG7DQ,CFkLJ,4CDzHN,+FAOI,oBCkHE,0CDzHN,+FAWI,uBAMJ,gGACE,aACA,eACA,sBACA,aG9EQ,CFkLJ,4CDxGN,gGAOI,uBCiGE,0CDxGN,gGAWI,uBCkGE,oCD7GN,gGAeI,oBAMJ,8FACE,aACA,eACA,sBACA,aGnGQ,CFkLJ,4CDnFN,8FAOI,oB","sources":["webpack://tra-components/./node_modules/tra-global-styles/src/02-components/03-organism/sq-card/sq-card.scss","webpack://tra-components/./node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack://tra-components/./node_modules/tra-global-styles/src/00-config/settings/_typography.scss","webpack://tra-components/./node_modules/tra-global-styles/src/00-config/settings/_sizing.scss"],"sourcesContent":[".organism--sq-card {\n  .organism--card--icon {\n    width: 6rem;\n    height: 6rem;\n  }\n\n  .organism--card--media img {\n    width: 100%;\n  }\n\n  .image-container:not(:has(img)):not(:has(svg)) + .organism--card--copy .heading {\n    margin-top: 0;\n  }\n\n  @include breakpoint(medium) {\n\n    .organism--card--copy .description,\n    .organism--card--copy .description p {\n      font-size: $body-lg-font-size;\n      line-height: $body-lg-line-height;\n\n      p.text__small {\n        font-size: $body-sm-smallscreen;\n        line-height: $body-sm-line-height;\n      }\n    }\n  }\n  .links {\n    display: grid;\n    grid-template-columns: repeat(1, max-content);\n    row-gap: $spacing-4;\n    column-gap: $spacing-4;\n    justify-items: start;\n    @include breakpoint(medium) {\n      column-gap: $spacing-6;\n      grid-template-columns: repeat(2, max-content);\n    }\n    @include breakpoint(large) {\n      display: flex;\n      flex-wrap: wrap;\n      column-gap: $spacing-6;\n    }\n  }\n}\n\n// @todo figure out how to clean this up or if thats needed.\n\n.fourcol-layout,\n.threecol-layout {\n  .organism--sq-card {\n    div[class*=\"bg-color-\"] {\n      padding: $spacing-6;\n    }\n  }\n}\n\n// Fine-grained link stacking.\n.fourcol-layout {\n  .organism--sq-card .organism--card--inner-wrapper .organism--card--copy .links {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    row-gap: $spacing-2;\n\n    @include breakpoint(medium) {\n      flex-direction: row;\n    }\n\n    @include breakpoint(large) {\n      flex-direction: column;\n    }\n  }\n}\n\n.threecol-layout {\n  .organism--sq-card .organism--card--inner-wrapper .organism--card--copy .links {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    row-gap: $spacing-2;\n\n    @include breakpoint(medium) {\n      flex-direction: column;\n    }\n\n    @include breakpoint(large) {\n      flex-direction: column;\n    }\n\n    @include breakpoint(xlarge) {\n      flex-direction: row;\n    }\n  }\n}\n\n.twocol-layout {\n  .organism--sq-card .organism--card--inner-wrapper .organism--card--copy .links {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    row-gap: $spacing-2;\n\n    @include breakpoint(medium) {\n      flex-direction: row;\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// Patch to fix issue #12080\n$-zf-size: null;\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  \"small\": 0,\n  \"medium\": 640px,\n  \"large\": 1024px,\n  \"xlarge\": 1200px,\n  \"xxlarge\": 1440px,\n) !default;\n\n/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.\n/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.\n/// @type Map\n$breakpoints-hidpi: (\n  \"hidpi-1\": 1,\n  \"hidpi-1-5\": 1.5,\n  \"hidpi-2\": 2,\n  \"retina\": 2,\n  \"hidpi-3\": 3\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi\n  // See https://www.w3.org/TR/css-values-3/#absolute-lengths\n  $std-web-dpi: 96;\n\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value of the following breakpoint\n  $bp-next: null;\n  // Value for max-width media queries\n  $bp-min: null;\n  // Value for min-width media queries\n  $bp-max: null;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // If named, name of the breakpoint\n  $name: null;\n  // If the breakpoint is a HiDPI breakpoint\n  $hidpi: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n\n  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints, $name);\n      $bp-next: -zf-map-next($breakpoints, $name);\n    }\n    @else if map-has-key($breakpoints-hidpi, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints-hidpi, $name);\n      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);\n      $hidpi: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';\n    }\n  }\n\n  @if not $name and $dir == 'only' {\n    @warn 'breakpoint(): Only named media queries can have an `only` range.';\n    @return null;\n  }\n\n  // Only 'only' and 'up' have a min limit.\n  @if $dir == 'only' or $dir == 'up' {\n    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n  }\n  // Only 'only' and 'down' have a max limit.\n  @if $dir == 'only' or $dir == 'down' {\n    // If the breakpoint is a value, use it as max limit.\n    @if not $name {\n      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n    }\n    // If the breakpoint is named, the max limit is the following breakpoint - 1px.\n    @else if $bp-next {\n      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n      // See https://github.com/foundation/foundation-sites/issues/11313\n      $bp-max: if($hidpi, $bp-next - divide(1, $std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);\n    }\n  }\n\n  // Generate the media query string from min and max limits.\n  @if $hidpi {\n    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.\n    // See https://caniuse.com/#feat=css-media-resolution\n    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);\n    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);\n    @return zf-str-join(\n      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),\n      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),\n      ', ');\n  }\n  @else {\n    @return -zf-bp-join($bp-min, $bp-max);\n  }\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// If multiple values are passed, the mixin will generate a media query for each of them as described above.\n/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that\n/// change across breakpoints.\n///\n/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($values...) {\n  @for $i from 1 through length($values) {\n    $value: nth($values, $i);\n    $str: breakpoint($value);\n    $bp: index($-zf-breakpoints-keys, nth($value, 1));\n    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n    // Direction of media query (up, down, or only)\n    $dir: if(length($value) > 1, nth($value, 2), up);\n\n    $old-zf-size: null;\n\n    // Make breakpoint size available as a variable\n    @if global-variable-exists(-zf-size) {\n      $old-zf-size: $-zf-size;\n    }\n    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n    // If $str is still an empty string, no media query is needed\n    @if $str == '' {\n      @content;\n    }\n\n    // Otherwise, wrap the content in a media query\n    @else {\n      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n      // generate print if the breakpoint affects the print-breakpoint (or smaller).\n      // This means the current condition only needs to be extended so 'down' always generates print.\n      @if $bp != null and ($bp <= $pbp or $dir == down) {\n        @media print, screen and #{$str} {\n          @content;\n        }\n      }\n      @else {\n        @media screen and #{$str} {\n          @content;\n        }\n      }\n    }\n\n    $-zf-size: $old-zf-size !global;\n  }\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Find the next number in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $number - Number to use as a starting point.\n///\n/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.\n@function -zf-map-next-number($map, $number) {\n\n  $next-number: null;\n\n  @each $k, $v in $map {\n    @if type-of($v) == 'number' and $v > $number and ($next-number == null or $v < $next-number) {\n      $next-number: $v;\n    }\n  }\n\n  @return $next-number;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found-key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found-key: true;\n    }\n    @if not $found-key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -zf-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {\n    @return $-zf-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n/// Return media query string from the given min and/or max limits.\n/// If a limit is equal to `null` or `0`, it is ignored.\n/// @access private\n///\n/// @param {Number} $min [0] - Min media query limit.\n/// @param {Number} $max [0] - Max media query limit.\n/// @param {String} $min-name ['min-width'] - Name of the min media query limit.\n/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.\n///\n/// @returns {String} Media Query string.\n@function -zf-bp-join(\n  $min: 0,\n  $max: 0,\n  $min-name: 'min-width',\n  $max-name: 'max-width'\n) {\n  @return zf-str-join(\n    if($min and $min > 0, '(#{$min-name}: #{$min})', null),\n    if($max and $max > 0, '(#{$max-name}: #{$max})', null),\n    ' and ');\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","// 4 $spacing-1\n// 16 $spacing-4\n// 24 $spacing-6\n// 32 $spacing-8\n\n/*------------------------------------*\\\n  Tag Default Sizes\n\\*------------------------------------*/\n$heading-xl-font-size:              60px;\n$heading-xl-line-height:            110%;\n$heading-xl-smallscreen:            40px;\n\n$heading-lg-font-size:              48px;\n$heading-lg-line-height:            110%;\n$heading-lg-smallscreen:            36px;\n\n$heading-md-font-size:              36px;\n$heading-md-line-height:            120%;\n$heading-md-smallscreen:            32px;\n\n$heading-sm-font-size:              26px;\n$heading-sm-line-height:            120%;\n$heading-sm-smallscreen:            26px;\n\n$heading-xs-font-size:              20px;\n$heading-xs-line-height:            120%;\n$heading-xs-smallscreen:            22px;\n\n$body-xl-font-size:              24px;\n$body-xl-line-height:            150%;\n$body-xl-smallscreen:            22px;\n\n$body-lg-font-size:              20px;\n$body-lg-line-height:            150%;\n$body-lg-smallscreen:            20px;\n\n$body-md-font-size:              16px;\n$body-md-line-height:            150%;\n$body-md-smallscreen:            18px;\n\n$body-sm-font-size:              14px;\n$body-sm-line-height:            150%;\n$body-sm-smallscreen:            14px;\n\n$label-xl-font-size:             26px;\n$label-xl-line-height:           150%;\n$label-xl-smallscreen:           $label-xl-font-size;\n\n$label-lg-font-size:             20px;\n$label-lg-line-height:           150%;\n$label-lg-smallscreen:           $label-lg-font-size;\n\n$label-md-font-size:             16px;\n$label-md-line-height:           150%;\n$label-md-smallscreen:           $label-md-font-size;\n\n$label-sm-font-size:             14px;\n$label-sm-line-height:           150%;\n$label-sm-smallscreen:           $label-sm-font-size;\n\n$h1-font-size:                      $heading-lg-font-size !default;\n$h1-line-height:                    $heading-lg-line-height !default;\n$h1-font-size-smallscreen:          $heading-lg-smallscreen !default;\n\n$h2-font-size:                      $heading-md-font-size !default;\n$h2-line-height:                    $heading-md-line-height !default;\n$h2-font-size-smallscreen:          $heading-md-smallscreen !default;\n\n$h3-font-size:                      $heading-sm-font-size !default;\n$h3-line-height:                    $heading-sm-line-height !default;\n$h3-font-size-smallscreen:          $heading-sm-smallscreen !default;\n\n$h4-font-size:                      $heading-xs-font-size !default;\n$h4-line-height:                    $heading-xs-line-height !default;\n$h4-font-size-smallscreen:          $heading-xs-smallscreen !default;\n\n$header-styles: (\n  xsmall: (\n    'h1': (\n      'font-size': 36,\n      'line-height': 39.6,\n    ),\n    'h2': (\n      'font-size': 32,\n      'line-height': 38.4,\n    ),\n    'h3': (\n      'font-size': 26,\n      'line-height': 31.2,\n    ),\n    'h4': (\n      'font-size': 22,\n      'line-height': 26.4,\n    ),\n    'h5': (\n      'font-family': $body-font-family,\n      'font-size': 14,\n      'line-height': 21,\n    ),\n    'body-xxl': (\n      'font-family': $body-font-family,\n      'font-size': 22,\n      'line-height': 26,\n    ),\n    'body-xl': (\n      'font-family': $body-font-family,\n      'font-size': 22,\n      'line-height': 26,\n    ),\n    'body-l': (\n      'font-family': $body-font-family,\n      'font-size': 20,\n      'line-height': 30,\n    ),\n    'body-m': (\n      'font-family': $body-font-family,\n      'font-size': 18,\n      'line-height': 27,\n    ),\n    'body-m-plus': (\n      'font-family': $body-font-family,\n      'font-size': 18,\n      'line-height': 27,\n    ),\n    'body-s': (\n      'font-family': $body-font-family,\n      'font-size': 14,\n      'line-height': 21,\n    ),\n    'label-xl': (\n      'font-family': $body-font-family,\n      'font-size': 26,\n      'line-height': 39,\n    ),\n    'label-l': (\n      'font-family': $body-font-family,\n      'font-size': 20,\n      'line-height': 30,\n    ),\n    'label-m': (\n      'font-family': $body-font-family,\n      'font-size': 16,\n      'line-height': 24,\n    ),\n    'label-s': (\n      'font-family': $body-font-family,\n      'font-size': 14,\n      'line-height': 21,\n    ),\n  ),\n  large: (\n    'h1': (\n      'font-size': 48,\n      'line-height': 52.8,\n    ),\n    'h2': (\n      'font-size': 36,\n      'line-height': 43.2,\n    ),\n    'h3': (\n      'font-size': 26,\n      'line-height': 31.2,\n    ),\n    'h3-plus': (\n      'font-size': 32,\n      'line-height': 38.2,\n    ),\n    'h4': (\n      'font-size': 20,\n      'line-height': 24,\n    ),\n    'h5': (\n      'font-family': $body-font-family,\n      'font-size': 14,\n      'line-height': 21,\n    ),\n    'body-xxl': (\n      'font-family': $body-font-family,\n      'font-size': 26,\n      'line-height': 31,\n    ),\n    'body-xl': (\n      'font-family': $body-font-family,\n      'font-size': 24,\n      'line-height': 36,\n    ),\n    'body-l': (\n      'font-family': $body-font-family,\n      'font-size': 20,\n      'line-height': 30,\n    ),\n    'body-m': (\n      'font-family': $body-font-family,\n      'font-size': 16,\n      'line-height': 24,\n    ),\n    'body-s': (\n      'font-family': $body-font-family,\n      'font-size': 14,\n      'line-height': 21,\n    ),\n    'label-xl': (\n      'font-family': $body-font-family,\n      'font-size': 26,\n      'line-height': 39,\n    ),\n    'label-l': (\n      'font-family': $body-font-family,\n      'font-size': 20,\n      'line-height': 30,\n    ),\n    'label-m': (\n      'font-family': $body-font-family,\n      'font-size': 16,\n      'line-height': 24,\n    ),\n    'label-s': (\n      'font-family': $body-font-family,\n      'font-size': 14,\n      'line-height': 21,\n    ),\n  ),\n);\n\n// Typography color profiles\n\n$default-text-color-profile-targets: '.tagline, .subtext, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6, p, a, .eyebrow, label, div';\n\n$text-color-profiles: (\n  /*\n    can specify the default then override individual tags/classes\n   */\n  light: (\n    default: white,\n  ),\n  dark: (\n    default: $color--brand--warm-black,\n  ),\n);\n","$spacing-1: .25rem;\n$spacing-2: .5rem;\n$spacing-3: .75rem;\n$spacing-4: 1rem;\n$spacing-5: 1.25rem;\n$spacing-6: 1.5rem;\n$spacing-7: 1.75rem;\n$spacing-8: 2rem;\n$spacing-9: 2.25rem;\n$spacing-10: 2.5rem;\n$spacing-11: 2.75rem;\n$spacing-12: 3rem;\n$spacing-13: 3.25rem;\n$spacing-14: 3.5rem;\n$spacing-15: 3.75rem;\n$spacing-16: 4rem;\n$spacing-17: 4.25rem;\n$spacing-18: 4.5rem;\n$spacing-19: 4.75rem;\n$spacing-20: 5rem;\n$spacing-21: 5.25rem;\n$spacing-22: 5.5rem;\n$spacing-23: 5.75rem;\n$spacing-24: 6rem;\n$spacing-25: 6.25rem;\n$spacing-26: 6.5rem;\n$spacing-27: 6.75rem;\n$spacing-28: 7rem;\n$spacing-29: 7.25rem;\n$spacing-30: 7.5rem;\n\n$spacing--focus: $spacing-1;\n\n// Spacing Variables\n$base-spacing:    1rem !default;\n$spacing-sm:      ($base-spacing * 0.5) !default;\n\n$spacing-map: (\n  0: 0,\n  1: $spacing-1,\n  2: $spacing-2,\n  3: $spacing-3,\n  4: $spacing-4,\n  5: $spacing-5,\n  6: $spacing-6,\n  7: $spacing-7,\n  8: $spacing-8,\n  9: $spacing-9,\n  10: $spacing-10,\n  11: $spacing-11,\n  12: $spacing-12,\n  13: $spacing-13,\n  14: $spacing-14,\n  15: $spacing-15,\n  16: $spacing-16,\n  17: $spacing-17,\n  18: $spacing-18,\n  19: $spacing-19,\n  20: $spacing-20,\n  21: $spacing-21,\n  22: $spacing-22,\n  23: $spacing-23,\n  24: $spacing-24,\n  25: $spacing-25,\n  26: $spacing-26,\n  27: $spacing-27,\n  28: $spacing-28,\n  29: $spacing-29,\n  30: $spacing-30,\n  focus: $spacing--focus,\n  base: $base-spacing,\n  sm: $spacing-sm,\n  auto: auto\n);\n"],"names":[],"sourceRoot":""}